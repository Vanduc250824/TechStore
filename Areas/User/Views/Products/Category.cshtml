@model IEnumerable<TechStore.Models.Product>
@using System

@{
    ViewData["Title"] = "Product Categories";
}

<div class="container py-4">
    <div class="row">
        <!-- Filters Column -->
        <div class="col-lg-3">
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title mb-4">Filters</h5>
                    <form id="filterForm">
                        <div class="mb-4">
                            <h6 class="mb-3">Price</h6>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" name="price" value="0-1000000" onchange="handleFilterChange(this)">
                                <label class="form-check-label">0 ₫ - 1.000.000 ₫</label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" name="price" value="1000000-5000000" onchange="handleFilterChange(this)">
                                <label class="form-check-label">1.000.000 ₫ - 5.000.000 ₫</label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" name="price" value="5000000-10000000" onchange="handleFilterChange(this)">
                                <label class="form-check-label">5.000.000 ₫ - 10.000.000 ₫</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="price" value="10000000-" onchange="handleFilterChange(this)">
                                <label class="form-check-label">Trên 10.000.000 ₫</label>
                            </div>
                        </div>

                        <div class="mb-4">
                            <h6 class="mb-3">Stock Status</h6>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" name="stock" value="instock" onchange="handleFilterChange(this)">
                                <label class="form-check-label">In Stock</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="stock" value="outofstock" onchange="handleFilterChange(this)">
                                <label class="form-check-label">Out of Stock</label>
                            </div>
                        </div>

                        <button type="button" class="btn btn-primary w-100" onclick="resetFilters()">Reset Filters</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Products Column -->
        <div class="col-lg-9">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <label class="me-2">Sort By:</label>
                    <select class="form-select d-inline-block w-auto" onchange="handleSortByChange(this)">
                        <option value="position">Position</option>
                        <option value="price-asc">Price: Low to High</option>
                        <option value="price-desc">Price: High to Low</option>
                        <option value="name-asc">Name: A to Z</option>
                        <option value="name-desc">Name: Z to A</option>
                    </select>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-secondary" onclick="setViewMode('grid')">
                        <i class="fas fa-th-large"></i>
                    </button>
                    <button type="button" class="btn btn-outline-secondary" onclick="setViewMode('list')">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            </div>

            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" id="productsGrid">
                @foreach (var product in Model)
                {
                    <div class="col product-item" 
                         data-price="@(product.DiscountedPrice ?? product.OriginalPrice)"
                         data-name="@product.Name"
                         data-stock="@(product.StockQuantity > 0 ? "instock" : "outofstock")">
                        @await Html.PartialAsync("_CardProductWithCart", product)
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
.product-card {
    transition: transform 0.2s, box-shadow 0.2s;
    border: none;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}
.product-card .card-img-top {
    height: 200px;
    object-fit: contain;
    padding: 1rem;
    background-color: #f8f9fa;
}
.product-badge {
    position: absolute;
    top: 10px;
    right: 10px;
    padding: 5px 10px;
    border-radius: 4px;
    color: white;
    font-weight: bold;
}
.product-title {
    font-size: 1rem;
    margin-bottom: 0.5rem;
    height: 2.4rem;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
}
.product-price {
    margin-bottom: 0.5rem;
}
.original-price {
    text-decoration: line-through;
    color: #6c757d;
    font-size: 0.9rem;
    margin-right: 0.5rem;
}
.discounted-price {
    color: #dc3545;
    font-weight: bold;
}
.current-price {
    color: #dc3545;
    font-weight: bold;
}
.stock-status {
    font-size: 0.9rem;
    margin-bottom: 1rem;
}
.card-footer {
    background-color: transparent;
    border-top: none;
    padding-top: 0;
}
.btn-group .btn.active {
    background-color: #0d6efd;
    color: white;
}
</style>

@section Scripts {
    <script>
        let currentViewMode = 'grid';
        let currentSortBy = 'position';
        let currentFilters = {
            price: [],
            stock: []
        };

        // Lưu trữ tất cả sản phẩm ban đầu
        let allProducts = [];

        // Khởi tạo khi trang được tải
        document.addEventListener('DOMContentLoaded', function() {
            // Lưu tất cả sản phẩm ban đầu
            allProducts = Array.from(document.querySelectorAll('.product-item'));
            
            // Khởi tạo nút grid view
            const gridBtn = document.querySelector('[onclick="setViewMode(\'grid\')"]');
            gridBtn.classList.add('active');
        });

        function setViewMode(mode) {
            currentViewMode = mode;
            const productsGrid = document.getElementById('productsGrid');
            const gridBtn = document.querySelector('[onclick="setViewMode(\'grid\')"]');
            const listBtn = document.querySelector('[onclick="setViewMode(\'list\')"]');

            if (mode === 'list') {
                productsGrid.classList.remove('row-cols-md-2', 'row-cols-lg-3');
                productsGrid.classList.add('row-cols-1');
                gridBtn.classList.remove('active');
                listBtn.classList.add('active');
            } else {
                productsGrid.classList.add('row-cols-md-2', 'row-cols-lg-3');
                productsGrid.classList.remove('row-cols-1');
                gridBtn.classList.add('active');
                listBtn.classList.remove('active');
            }
        }

        function handleSortByChange(select) {
            currentSortBy = select.value;
            applyFiltersAndSort();
        }

        function handleFilterChange(checkbox) {
            const filterType = checkbox.name;
            const filterValue = checkbox.value;

            if (checkbox.checked) {
                if (!currentFilters[filterType].includes(filterValue)) {
                    currentFilters[filterType].push(filterValue);
                }
            } else {
                currentFilters[filterType] = currentFilters[filterType].filter(value => value !== filterValue);
            }

            applyFiltersAndSort();
        }

        function resetFilters() {
            // Reset checkboxes
            document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                checkbox.checked = false;
            });

            // Reset filter state
            currentFilters = {
                price: [],
                stock: []
            };

            // Reset sort
            currentSortBy = 'position';
            document.querySelector('select').value = 'position';

            // Hiển thị lại tất cả sản phẩm
            const productsGrid = document.getElementById('productsGrid');
            productsGrid.innerHTML = '';
            allProducts.forEach(product => {
                productsGrid.appendChild(product.cloneNode(true));
            });
        }

        function applyFiltersAndSort() {
            const productsGrid = document.getElementById('productsGrid');
            let filteredProducts = [...allProducts];

            // Apply filters
            if (currentFilters.price.length > 0 || currentFilters.stock.length > 0) {
                filteredProducts = allProducts.filter(product => {
                    const price = parseFloat(product.dataset.price);
                    const stock = product.dataset.stock;

                    // Check price filters
                    const priceMatch = currentFilters.price.length === 0 || currentFilters.price.some(range => {
                        const [min, max] = range.split('-').map(val => val === '' ? Infinity : parseFloat(val));
                        return price >= min && price <= max;
                    });

                    // Check stock filters
                    const stockMatch = currentFilters.stock.length === 0 || currentFilters.stock.includes(stock);

                    return priceMatch && stockMatch;
                });
            }

            // Sort products
            filteredProducts.sort((a, b) => {
                const priceA = parseFloat(a.dataset.price);
                const priceB = parseFloat(b.dataset.price);
                const nameA = a.dataset.name;
                const nameB = b.dataset.name;

                switch (currentSortBy) {
                    case 'price-asc':
                        return priceA - priceB;
                    case 'price-desc':
                        return priceB - priceA;
                    case 'name-asc':
                        return nameA.localeCompare(nameB);
                    case 'name-desc':
                        return nameB.localeCompare(nameA);
                    default:
                        return 0;
                }
            });

            // Clear and update grid
            productsGrid.innerHTML = '';
            if (filteredProducts.length === 0) {
                productsGrid.innerHTML = `
                    <div class="col-12 text-center py-5">
                        <i class="fas fa-box-open fa-4x text-muted mb-4"></i>
                        <h3>No Products Found</h3>
                        <p class="text-muted">Try adjusting your filters</p>
                    </div>
                `;
            } else {
                filteredProducts.forEach(product => {
                    productsGrid.appendChild(product.cloneNode(true));
                });
            }
        }
    </script>
}
